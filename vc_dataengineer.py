# -*- coding: utf-8 -*-
"""vc_dataengineer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sB3fE7r4srRqiiQtStLTFbXwTstuqAxo

# Problem 1

Create a function called `vc_range` that takes into parameter an integer `n`.

This function will print the numbers from 0 to n.

There are some conditions, however:
 - For multiples of four, it should print "Vestiaire" instead of a number.
 - For multiples of seven, it should print "Collective"
 - For numbers which are multiples of both: the four and seven, it should print "VestiaireCollective"

Example :
```
>>> vc_range(30)
VestiaireCollective
1
2
3
Vestiaire
5
6
Collective
Vestiaire
9
10
11
Vestiaire
13
Collective
15
Vestiaire
17
18
19
Vestiaire
Collective
22
23
Vestiaire
25
26
27
VestiaireCollective
29
```
"""

# Your solution
def vc_range(num):
    for multiples in range(num):

        if multiples % 4 == 0 and multiples % 7 == 0:
            print('Vestaire Collective')
        elif multiples % 4 == 0:
            print('Vestaire')
        elif multiples % 7 == 0:
            print('Collective')
        else:
            print(multiples)


vc_range(30)

"""# Problem 2

Create a class VcList that inherits from `list`.

The class should have an instance attribute `max_length` (a positive integer) that sets the maximal length of the list. If the attribute is set to a negative number, it should raise an Exception.

Overwrite all needed methods to prevent VcList objects from exceeding max_length. Exceptions should be raised if the user attempts to exceed this length.
"""

# Your solution
class BoundExceedError(Exception):
    pass


class VcList(list):

    # Constructor  
    def __init__(self, *args, **kwargs):
        self.length = kwargs.pop('length', None)
        super(VcList, self).__init__(*args, **kwargs)

    # Raise BoundExceedError, if items in list is exceeded
    def _check_item_bound(self):
        if self.length and len(self) >= self.length:
            raise BoundExceedError()

    # Raise BoundExceedError, if length is exceeded
    def _check_list_bound(self, L):
        if self.length and len(self) + len(L) > self.length:
            raise BoundExceedError()

    # Raise BoundExceedError, if appending to this list legnth is exceeded
    def append(self, x):
        self._check_item_bound()
        return super(VcList, self).append(x)

    def extend(self, L):
        self._check_list_bound(L)
        return super(VcList, self).extend(L)

    # Raise BoundExceedError, if inserting to this list legnth is exceeded
    def insert(self, i, x):
        self._check_item_bound()
        return super(VcList, self).insert(i, x)

    # Raise BoundExceedError, if adding to this list legnth is exceeded
    def __add__(self, L):
        self._check_list_bound(L)
        return super(VcList, self).__add__(L)

# Normal test case with a list having the lenght of 7
l = VcList(length = 7)
l.extend([1,2,3,4,5])
l.insert(5,9)
l.append(6)
print(l)

# Exception errors, when the lenght of a list is exceeded
# l = VcList(length=5)
# l.extend([1,2,3,4,5,6])
# l.insert(1,9)
# l.append(6)
# print(l)

"""# Problem 3

The two datasets `wta_matches.csv` and `wta_players.csv` in data folder contain information about tennis match results.

You can find additional information if needed in the dictionnary file or here : https://github.com/JeffSackmann/tennis_wta

Please answer the following question by using `wta_matches.csv` and `wta_players.csv` files:

- How many matches were played by surface (Hard/Clay/Grass ...)
- Which country won the highest number of matches
- Which player(s) disputed the highest number of games 
    - Be careful, in tennis, one match consists of several games
    - For example, if the score of a match is 6-1 6-3, both players disputed 16 (6+1+6+3) games during that match 
    - Sometimes score can include a number > 10 (ex: 6-1 3-6 10-8 and both players played 34 games)
    - Sometimes, you will find number between parenthesis in the score column, for example 6-1 7-6 (2). Numbers between parenthesis can be ignored. In the example, both players disputed 20 games.
    - Sometimes, you will find a score that ends up with "RET". It means that one of the player abandoned. For example, if the score is 6-1 2-0 RET, both players disputed 9 games.
- Which player(s) won the highest number of matches in a row

Nb of matches played by surface : 

+--------------------+-------+
|total_matches_played|surface|
+--------------------+-------+
|                1776|   Hard|
|                 791|   Clay|
|                 306|  Grass|
+--------------------+-------+

Best country : 

USA

Player(s) that disputed the most games : 

+---------+-----------------+--------+----------------------+
|winner_id|winner_first_name|loser_id|total_matches_disputed|
+---------+-----------------+--------+----------------------+
|   202458|         Ashleigh|  202428|                    93|
|   202427|          Johanna|  201585|                    92|
|   202494|            Elina|  213550|                    88|
|   201549|            Petra|  201540|                    82|
|   211768|            Naomi|  201444|                    81|
|   202458|         Ashleigh|  201520|                    77|
|   202428|             Kiki|  202499|                    73|
|   206108|         Jennifer|  201614|                    69|
|   211768|            Naomi|  201520|                    68|
|   202505|          Belinda|  211768|                    67|
|   202458|         Ashleigh|  206289|                    66|
|   204426|            Anett|  201548|                    64|
|   202490|          Rebecca|  202663|                    64|
|   210722|            Elise|  211701|                    63|
|   201520|            Petra|  201540|                    62|
|   202421|           Alison|  204434|                    62|
|   215370|           Bianca|  201593|                    62|
|   214954|          Marketa|  201366|                    62|
|   214149|         Viktoria|  201499|                    61|
|   201548|             Ajla|  214461|                    60|
+---------+-----------------+--------+----------------------+

Player(s) won the highest number of matches in a row : 


+----------+------+----------+-----------+-------+
|total_wins|    id|first_name|  last_name|country|
+----------+------+----------+-----------+-------+
|        57|202428|      Kiki|    Bertens|    NED|
|        52|202458|  Ashleigh|      Barty|    AUS|
|        51|201662|  Karolina|   Pliskova|    CZE|
|        49|213550|     Sofia|      Kenin|    USA|
|        48|202505|   Belinda|     Bencic|    SUI|
|        40|211768|     Naomi|      Osaka|    JPN|
|        40|202494|     Elina|  Svitolina|    UKR|
|        40|215370|    Bianca|  Andreescu|    CAN|
|        39|201594|    Simona|      Halep|    ROU|
|        37|201520|     Petra|    Kvitova|    CZE|
|        36|214544|     Aryna|  Sabalenka|    BLR|
|        36|201549|     Petra|     Martic|    CRO|
|        35|206420| Ekaterina|Alexandrova|    RUS|
|        35|210722|     Elise|    Mertens|    BEL|
|        35|202499|     Donna|      Vekic|    CRO|
|        33|202427|   Johanna|      Konta|    GBR|
|        32|206368|  Veronika|Kudermetova|    RUS|
|        31|215035|    Dayana| Yastremska|    UKR|
|        31|201444|    Su Wei|      Hsieh|    TPE|
|        29|201493| Angelique|     Kerber|    GER|
+----------+------+----------+-----------+-------+
"""

# Provide the code you used, you can use multiple cells and import the libraries you want.

"""Connecting Drive to Colab \
Mounting Google Drive

"""

from google.colab import drive
drive.mount('/content/drive')

"""Setting up PySpark in Colab"""

!apt-get install openjdk-8-jdk-headless -qq > /dev/null

"""Installing Apache Spark 3.0.1 with Hadoop 2.7 from the link"""

!wget -q https://downloads.apache.org/spark/spark-3.1.2/spark-3.1.2-bin-hadoop3.2.tgz

!wget -q https://downloads.apache.org/spark/spark-3.1.1/spark-3.1.1-bin-hadoop2.7.tgz

"""To unzip that folder"""

!tar xf spark-3.1.0-bin-hadoop2.7.tgz

"""Install findspark library"""

!pip install -q findspark

"""To set the environment path"""

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.1.1-bin-hadoop2.7"

"""To locate Spark in the system"""

import findspark
findspark.init()

"""To know the location where Spark is installed"""

findspark.find()

"""To view the Spark UI"""

!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
!unzip ngrok-stable-linux-amd64.zip
get_ipython().system_raw('./ngrok http 4050 &')
!curl -s http://localhost:4040/api/tunnels

from pyspark.sql import SparkSession

spark = SparkSession.builder\
        .master("local[*]")\
        .appName("Tennis Analysis")\
        .config('spark.ui.port', '4050')\
        .getOrCreate()
print("A Technical Match Analysis")

"""Loading wta_matches csv file into PySpark"""

match_data = spark.read.csv("/wta_matches.csv", header=True, inferSchema=True)

"""Understanding the Data"""

match_data.printSchema()

"""To display informations about the file"""

match_data.explain()

match_data.show(10)

"""To calculate the Nb of matches played by surface """

match_data.createOrReplaceTempView("match_data")
spark.sql("SELECT COUNT(match_num) AS total_matches_played, surface FROM match_data GROUP BY surface ORDER BY total_matches_played DESC").show()

"""Loading wta_players csv file into PySpark"""

player_data = spark.read.csv("/wta_players.csv", header=True, inferSchema=True)

player_data.printSchema()

player_data.show(5)

"""To rename columns with spaces or capital letters"""

player_data = player_data.withColumnRenamed("Id","id") \
    .withColumnRenamed("First Name","first_name") \
    .withColumnRenamed("Last Name","last_name") \
    .withColumnRenamed("First Name","first_name") \
    .withColumnRenamed("Country","country")

player_data.printSchema()

"""To calculate the Best country """

player_data.createOrReplaceTempView("player_data")

spark.sql("SELECT COUNT(m.winner_id) AS total_wins, p.country FROM match_data AS m LEFT JOIN player_data AS p WHERE m.winner_id = p.Id GROUP BY p.country ORDER BY total_wins DESC").show()

"""A function to calculate disputed matches while filtering parenthesis, RET and W/O"""

from pyspark.sql.functions import udf
from pyspark.sql.types import IntegerType
def aggregate(score):
  return sum(list(map(int,re.sub(r'\([^)]*\)', '', score).replace("-"," ").replace("RET", " ").replace("W/O", " ").split())))

my_udf = udf(lambda x: aggregate(x), IntegerType())

disputed_data = match_data.withColumn("disputed", my_udf(match_data["score"]))
disputed_data.show()

disputed_data.printSchema()

"""To calculate player(s) with the highest disputed number of games"""

disputed_data.createOrReplaceTempView("disputed_data")
spark.sql("SELECT winner_id, first_name AS winner_first_name, loser_id, sum(disputed) AS total_matches_disputed FROM disputed_data LEFT JOIN player_data WHERE winner_id = id GROUP BY winner_id,loser_id, winner_first_name ORDER BY total_matches_disputed DESC").show()

"""To calculate the Player(s) who won the highest number of matches in a row :"""

spark.sql("SELECT COUNT(m.winner_id) AS total_wins, p.id, p.first_name, p.last_name, p.country FROM match_data AS m LEFT JOIN player_data AS p WHERE m.winner_id = p.id GROUP BY p.id, p.first_name, p.last_name, p.country ORDER BY total_wins DESC").show()

"""To look for informations about a player"""

spark.sql("SELECT * FROM player_data WHERE id = 202428").show()

"""Why I decided to use Pyspark libraries:


*   I prefer using a distributed approach whenever I am doing data analysis.

*   Last but not the least, the compute and storage capabilities are more advantageous. 




"""